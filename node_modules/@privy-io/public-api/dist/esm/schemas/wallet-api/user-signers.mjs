import{z as t}from"zod";import{ImportEmailAccountInput as e,ImportCustomJwtAccountInput as r}from"../user-import.mjs";import{BaseWalletApiCreateInput as i,WalletResponse as o}from"./wallets.mjs";import"../core.mjs";import"bs58";import"libphonenumber-js/max";import"viem";import"../embedded-wallet-creation.mjs";import"../user.mjs";import"../smart-wallet-config.mjs";import"../../constants/smart-wallets.mjs";import"@privy-io/api-base";import"../api.mjs";import"../transaction.mjs";import"./export.mjs";let s=i.omit({owner:!0,owner_id:!0,additional_signers:!0,authorization_key_ids:!0,authorization_threshold:!0});const n=t.object({wallets:t.array(s),primary_signer:t.object({subject_id:t.string()}).strict(),recovery_user:t.object({linked_accounts:t.array(t.union([e,r])).min(1).max(2).refine((t=>{if(2===t.length){let e=t.filter((t=>"email"===t.type)),r=t.filter((t=>"custom_auth"===t.type));return 1===e.length&&1===r.length}return!0}),{message:"Must have either one email and one custom JWT account, or one of each"})}).strict()}).strict(),a=t.object({wallets:t.array(o),recovery_user_id:t.string()}).strict();let m=t.object({user_jwt:t.string({required_error:"User JWT must be provided",invalid_type_error:"User JWT must be a string"})}).strict(),c=m.extend({encryption_type:t.literal("HPKE"),recipient_public_key:t.string({required_error:"Recipient public key must be provided",invalid_type_error:"Recipient public key must be a string"})}).strict();const p=t.union([c,m]);let l=t.object({expires_at:t.number(),wallets:t.array(o)}).strict();const u=l.extend({encrypted_authorization_key:t.object({encryption_type:t.literal("HPKE"),encapsulated_key:t.string(),ciphertext:t.string()}).strict()}),_=l.extend({authorization_key:t.string()}),d=t.union([u,_]);export{u as EncryptedUserSignersAuthenticateResponse,_ as RawUserSignersAuthenticateResponse,p as UserSignersAuthenticateInput,d as UserSignersAuthenticateResponse,n as WalletsWithRecoveryRequest,a as WalletsWithRecoveryResponse};
