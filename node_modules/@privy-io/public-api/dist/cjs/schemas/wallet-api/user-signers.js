"use strict";var e=require("zod"),t=require("../user-import.js"),r=require("./wallets.js");require("../core.js"),require("bs58"),require("libphonenumber-js/max"),require("viem"),require("../embedded-wallet-creation.js"),require("../user.js"),require("../smart-wallet-config.js"),require("../../constants/smart-wallets.js"),require("@privy-io/api-base"),require("../api.js"),require("../transaction.js"),require("./export.js");let i=r.BaseWalletApiCreateInput.omit({owner:!0,owner_id:!0,additional_signers:!0,authorization_key_ids:!0,authorization_threshold:!0});const s=e.z.object({wallets:e.z.array(i),primary_signer:e.z.object({subject_id:e.z.string()}).strict(),recovery_user:e.z.object({linked_accounts:e.z.array(e.z.union([t.ImportEmailAccountInput,t.ImportCustomJwtAccountInput])).min(1).max(2).refine((e=>{if(2===e.length){let t=e.filter((e=>"email"===e.type)),r=e.filter((e=>"custom_auth"===e.type));return 1===t.length&&1===r.length}return!0}),{message:"Must have either one email and one custom JWT account, or one of each"})}).strict()}).strict(),n=e.z.object({wallets:e.z.array(r.WalletResponse),recovery_user_id:e.z.string()}).strict();let o=e.z.object({user_jwt:e.z.string({required_error:"User JWT must be provided",invalid_type_error:"User JWT must be a string"})}).strict(),a=o.extend({encryption_type:e.z.literal("HPKE"),recipient_public_key:e.z.string({required_error:"Recipient public key must be provided",invalid_type_error:"Recipient public key must be a string"})}).strict();const u=e.z.union([a,o]);let c=e.z.object({expires_at:e.z.number(),wallets:e.z.array(r.WalletResponse)}).strict();const l=c.extend({encrypted_authorization_key:e.z.object({encryption_type:e.z.literal("HPKE"),encapsulated_key:e.z.string(),ciphertext:e.z.string()}).strict()}),p=c.extend({authorization_key:e.z.string()}),z=e.z.union([l,p]);exports.EncryptedUserSignersAuthenticateResponse=l,exports.RawUserSignersAuthenticateResponse=p,exports.UserSignersAuthenticateInput=u,exports.UserSignersAuthenticateResponse=z,exports.WalletsWithRecoveryRequest=s,exports.WalletsWithRecoveryResponse=n;
