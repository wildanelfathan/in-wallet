import{ethers as e}from"ethers";import{PrivyClientError as t}from"./errors.mjs";import{r as a}from"./utils-DRjOr8oi.mjs";import"node-fetch-native";import"ts-case-convert";const r=r=>{let{walletId:o,address:d,privyClient:m,provider:c}=r;class p extends e.AbstractSigner{connect(e){return new p(e)}async getAddress(){return d}async signTransaction(e){let t=i(e),{signedTransaction:a}=await m.walletApi.ethereum.signTransaction({address:d,chainType:"ethereum",transaction:t});return a}async signMessage(e){let t=n(e),{signature:a}=await m.walletApi.ethereum.signMessage({address:d,chainType:"ethereum",message:t});return a}async signTypedData(e,r,i){let n=a(e,s),d=a(i,s),c=Object.keys(r).find((e=>"EIP712Domain"!==e))||"";if(!c)throw new t("Could not determine primaryType from types");let{signature:p}=await m.walletApi.ethereum.signTypedData({walletId:o,typedData:{domain:n,types:r,message:d,primaryType:c}});return p}constructor(e){super(e),this.address=d}}return new p(c)};let i=e=>{let a=2;if(void 0!==e.type)if(0===e.type)a=0;else if(1===e.type)a=1;else{if(2!==e.type)throw new t("EIP4844 and EIP7702 transaction types are not yet supported.");a=2}else e.gasPrice&&!e.maxFeePerGas&&(a=0);return{to:e.to?e.to.toString():void 0,nonce:void 0!==e.nonce?Number(e.nonce):void 0,chainId:void 0!==e.chainId?Number(e.chainId):void 0,data:e.data?e.data.toString():void 0,value:e.value?s(e.value):void 0,type:a,gasLimit:e.gasLimit?s(e.gasLimit):void 0,gasPrice:e.gasPrice?s(e.gasPrice):void 0,maxFeePerGas:e.maxFeePerGas?s(e.maxFeePerGas):void 0,maxPriorityFeePerGas:e.maxPriorityFeePerGas?s(e.maxPriorityFeePerGas):void 0}},s=t=>{if(null!=t)return e.toBeHex(t)},n=e=>e;export{r as createEthersSigner};
