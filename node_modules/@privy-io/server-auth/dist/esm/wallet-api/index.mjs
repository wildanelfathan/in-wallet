import{PrivyClientError as e}from"../errors.mjs";import{getWalletApiSearchPath as a,getWalletApiGetPath as t,getPolicyPath as i,updatePolicyPath as r,deletePolicyPath as n,createPolicyRulePath as s,updatePolicyRulePath as o,deletePolicyRulePath as d,getPolicyRulePath as c,getTransactionGetPath as p,getWalletApiCreatePath as h,getWalletApiRpcPath as y,createPolicyPath as u}from"../paths.mjs";import{g as m}from"../utils-DRjOr8oi.mjs";import{convertPolicyResponseToPolicy as l,convertPolicyCreateRequestToPolicy as g,convertPolicyCreateRuleToPolicyRule as _}from"./mappers.mjs";import{EthereumRpcApi as w}from"./rpc/ethereum.mjs";import{SolanaRpcApi as f}from"./rpc/solana.mjs";import{normalizeP256PrivateKeyToScalar as v,createP256KeyPair as I,decryptHPKEMessage as P,extractIdempotencyKeyHeader as b,createAuthorizationSignatureHeader as K,getWalletIdFromAddress as z,signAuthorizationSignatureRequest as T,formatAuthorizationSignatureRequest as x}from"./utils.mjs";import"node-fetch-native";import"ts-case-convert";import"@hpke/chacha20poly1305";import"@hpke/core";import"@noble/curves/p256";import"@noble/hashes/sha256";import"canonicalize";import"../constants.mjs";function S(e,a){if(!Object.prototype.hasOwnProperty.call(e,a))throw TypeError("attempted to use private field on non-instance");return e}var k=0,A="__private_"+k+++"__getRequestHeaders";class E{async getWallets(e={}){let{cursor:t,limit:i,chainType:r}=e,{data:n}=await this.api.get(a()+m({cursor:t,limit:i,chain_type:r}));return{nextCursor:n.next_cursor??void 0,data:n.data.map((e=>({id:e.id,address:e.address,chainType:e.chain_type,policyIds:e.policy_ids,createdAt:new Date(e.created_at)})))}}async getWallet({id:e}){let{data:a}=await this.api.get(t(e));return{id:a.id,chainType:a.chain_type,address:a.address,policyIds:a.policy_ids,createdAt:new Date(a.created_at)}}updateAuthorizationKey(e){this.authorizationPrivateKey=v(e),this.ethereum=new w({appId:this.appId,api:this.api,authorizationPrivateKey:this.authorizationPrivateKey}),this.solana=new f({appId:this.appId,api:this.api,authorizationPrivateKey:this.authorizationPrivateKey})}async generateUserSigner({userJwt:e}){let{publicKey:a,privateKey:t}=await I(),{data:i}=await this.api.post("/api/v1/user_signers/authenticate",{encryption_type:"HPKE",recipient_public_key:a.toString("base64"),user_jwt:e});return{authorizationKey:await P(t.toString("base64"),i.encrypted_authorization_key.encapsulated_key,i.encrypted_authorization_key.ciphertext),expiresAt:new Date(i.expires_at),wallets:i.wallets.map((e=>({id:e.id,address:e.address,chainType:e.chain_type,policyIds:e.policy_ids,createdAt:new Date(e.created_at)})))}}async getPolicy({id:e}){let{data:a}=await this.api.get(i(e));return l(a)}async createPolicy(e){let a=u(),t=g(e),{data:i}=await this.api.post(a,t,{headers:S(this,A)[A]({path:a,body:t,method:"POST"})});return l(i)}async updatePolicy(e){let a=r(e.id),t={name:e.name,rules:e.rules?_(e.rules):void 0},{data:i}=await this.api.patch(a,t,{headers:S(this,A)[A]({path:a,body:t,method:"PATCH"})});return l(i)}async deletePolicy(e){let a=n(e.id),t={};await this.api.delete(a,t,{headers:S(this,A)[A]({path:a,body:t,method:"DELETE"})})}async addRuleToPolicy(e){let a=s(e.policyId),t={name:e.name,action:e.action,method:e.method,conditions:e.conditions},{data:i}=await this.api.post(a,t,{headers:S(this,A)[A]({path:a,body:t,method:"POST"})});return i}async updateRuleInPolicy(e){let a=o(e.policyId,e.ruleId),t={name:e.name,action:e.action,method:e.method,conditions:e.conditions},{data:i}=await this.api.patch(a,t,{headers:S(this,A)[A]({path:a,body:t,method:"PATCH"})});return i}async deleteRuleFromPolicy(e){let a=d(e.policyId,e.ruleId),t={};await this.api.delete(a,t,{headers:S(this,A)[A]({path:a,body:t,method:"DELETE"})})}async getRuleInPolicy(e){let a=c(e.policyId),{data:t}=await this.api.get(a);return t}async getTransaction({id:e}){let{data:a}=await this.api.get(p(e));return{id:a.id,walletId:a.wallet_id,caip2:a.caip2,transactionHash:a.transaction_hash,status:a.status}}async create(e){return await this.createWallet(e)}async createWallet(a){let{chainType:t,authorizationKeyIds:i,authorizationThreshold:r}=a,n={};if("ownerId"in a&&a.ownerId)n={owner_id:a.ownerId};else if("owner"in a&&a.owner)if("publicKey"in a.owner&&a.owner.publicKey)n={owner:{public_key:a.owner.publicKey}};else{if(!("userId"in a.owner)||!a.owner.userId)throw new e("Invalid owner input. Must include either `publicKey` or `userId`.");n={owner:{user_id:a.owner.userId}}}let s={};"authorizationKeyIds"in a||"authorizationThreshold"in a?s={authorization_key_ids:i,authorization_threshold:r}:"additionalSigners"in a&&a.additionalSigners&&(s={additional_signers:a.additionalSigners.map((e=>({signer_id:e.signerId})))});let o={chain_type:t,...n,...s},d=b(a),c=K({method:"POST",url:`${this.api.baseURL}${h()}`,body:o,appId:this.appId,idempotencyKeyHeader:d,authorizationPrivateKey:this.authorizationPrivateKey}),{data:p}=await this.api.post(h(),o,{headers:{...c,...d}});return{id:p.id,address:p.address,chainType:p.chain_type,policyIds:p.policy_ids,createdAt:new Date(p.created_at)}}async rpc(a){let t;if("walletId"in a)t=y(a.walletId);else{if(!("address"in a))throw new e("Invalid RPC payload. Must include `walletId`.");{console.warn("Warning: using deprecated input 'address' this will be removed in a a future version. Use 'walletId' instead.");let i=await z(this.api,a.address);if(!i)throw new e(`No wallet account found for address ${a.address}`);t=y(i)}}let i=function(e){let{method:a,params:t}=e,i="address"in e?{address:e.address,chain_type:e.chainType}:{wallet_id:e.walletId};switch(a){case"signTransaction":return{...i,method:a,params:{transaction:Buffer.from(t.transaction.serialize({verifySignatures:!1})).toString("base64"),encoding:"base64"}};case"signMessage":{let e=Buffer.from(t.message).toString("base64");return{...i,method:a,params:{message:e,encoding:"base64"}}}case"signAndSendTransaction":return{...i,method:a,caip2:e.caip2,params:{transaction:Buffer.from(t.transaction.serialize({verifySignatures:!1})).toString("base64"),encoding:"base64"}};case"eth_signTransaction":return{...i,method:a,params:{transaction:{from:t.transaction.from,to:t.transaction.to,nonce:t.transaction.nonce,chain_id:t.transaction.chainId,data:t.transaction.data,value:t.transaction.value,type:t.transaction.type,gas_limit:t.transaction.gasLimit,gas_price:t.transaction.gasPrice,max_fee_per_gas:t.transaction.maxFeePerGas,max_priority_fee_per_gas:t.transaction.maxPriorityFeePerGas}}};case"personal_sign":let r;return r=t.message instanceof Uint8Array?{message:Buffer.from(t.message).toString("hex"),encoding:"hex"}:t.message.startsWith("0x")?{message:t.message,encoding:"hex"}:{message:t.message,encoding:"utf-8"},{...i,method:a,params:r};case"eth_signTypedData_v4":return{...i,method:a,params:{typed_data:{domain:t.typedData.domain,types:t.typedData.types,message:t.typedData.message,primary_type:t.typedData.primaryType}}};case"eth_sendTransaction":return{...i,method:a,caip2:e.caip2,params:{transaction:{from:t.transaction.from,to:t.transaction.to,nonce:t.transaction.nonce,chain_id:t.transaction.chainId,data:t.transaction.data,value:t.transaction.value,type:t.transaction.type,gas_limit:t.transaction.gasLimit,gas_price:t.transaction.gasPrice,max_fee_per_gas:t.transaction.maxFeePerGas,max_priority_fee_per_gas:t.transaction.maxPriorityFeePerGas}}};default:throw Error(`Unsupported method: ${a}`)}}(a),r=b(a),n=K({method:"POST",url:`${this.api.baseURL}${t}`,body:i,appId:this.appId,idempotencyKeyHeader:r,authorizationPrivateKey:this.authorizationPrivateKey}),{data:s}=await this.api.post(t,i,{headers:{...n,...r}});return await async function(e,a){switch(a.method){case"signMessage":return{method:a.method,data:{signature:Buffer.from(a.data.signature,"base64")}};case"signTransaction":let t,i=e.params.transaction,r=Buffer.from(a.data.signed_transaction,"base64"),{Transaction:n,VersionedTransaction:s}=await import("@solana/web3.js");return t="version"in i?s.deserialize(r):n.from(r),{method:a.method,data:{signedTransaction:t}};case"signAndSendTransaction":if(a.data)return{method:a.method,data:{transactionId:a.data.transaction_id,hash:a.data.hash,caip2:a.data.caip2}};if(a.error)return{method:a.method,error:{code:a.error.code,message:a.error.message}};throw Error("Unexpected API response to signAndSendTransaction");case"eth_signTransaction":return{method:a.method,data:{signedTransaction:a.data.signed_transaction,encoding:a.data.encoding}};case"eth_sendTransaction":if(a.data)return{method:a.method,data:{transactionId:a.data.transaction_id,hash:a.data.hash,caip2:a.data.caip2}};if(a.error)return{method:a.method,error:{code:a.error.code,message:a.error.message}};throw Error("Unexpected API response to eth_sendTransaction");case"personal_sign":case"eth_signTypedData_v4":return{method:a.method,data:{signature:a.data.signature,encoding:a.data.encoding}};default:throw Error("Unsupported method")}}(a,s)}constructor({appId:e,api:a,authorizationPrivateKey:t}){Object.defineProperty(this,A,{value:D}),this.authorizationPrivateKey=null,this.api=a,t&&(this.authorizationPrivateKey=v(t)),this.appId=e,this.ethereum=new w({appId:e,api:a,authorizationPrivateKey:this.authorizationPrivateKey}),this.solana=new f({appId:e,api:a,authorizationPrivateKey:this.authorizationPrivateKey})}}function D({path:e,body:a,idempotencyKey:t,method:i}){let r=b({idempotencyKey:t}),n={...r};if(this.authorizationPrivateKey){let t=T({method:i,url:`${this.api.baseURL}${e}`,body:a,appId:this.appId,idempotencyKeyHeader:r,authorizationPrivateKey:this.authorizationPrivateKey});void 0!==t&&(n["privy-authorization-signature"]=t)}return n}function j({input:e,authorizationPrivateKey:a}){let t;try{t=v(a)}catch(e){throw Error("Invalid authorization key format. Expected Privy-specific Authorization private key (wallet-auth:...)")}return T({method:e.method,url:e.url,body:e.body,appId:e.headers["privy-app-id"],idempotencyKeyHeader:e.headers["privy-idempotency-key"]?{"privy-idempotency-key":e.headers["privy-idempotency-key"]}:void 0,authorizationPrivateKey:t})}function H({input:e}){return x({method:e.method,body:e.body,url:e.url,appId:e.headers["privy-app-id"],idempotencyKeyHeader:e.headers["privy-idempotency-key"]?{"privy-idempotency-key":e.headers["privy-idempotency-key"]}:void 0})}export{E as WalletApi,H as formatRequestForAuthorizationSignature,j as generateAuthorizationSignature};
